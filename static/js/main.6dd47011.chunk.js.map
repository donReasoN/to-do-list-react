{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","buttonName","addNewTask","useState","newTaskContent","setNewTaskContent","onSubmit","event","preventDefault","trim","className","value","onChange","target","placeholder","type","Tasks","tasks","hideDoneTasks","removeTask","toogleTaskDone","map","task","key","id","done","onClick","content","Buttons","toogleHideDoneTasks","markAllTaskDone","length","disabled","every","Section","title","sectionBody","extraHeaderContent","Header","Container","props","children","App","setHideDoneTask","setTasks","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6dd47011.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst Form = ({buttonName, addNewTask}) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\")\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        addNewTask(newTaskContent.trim());\r\n        setNewTaskContent(\"\");\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={onFormSubmit} className=\"form\">\r\n            <input \r\n                value={newTaskContent} \r\n                onChange={(event) => setNewTaskContent(event.target.value)}\r\n                placeholder=\"What do you want to do?\"\r\n                className=\"form__input\" \r\n                type=\"text\"/>\r\n            <button className=\"form__button\">{buttonName}</button>\r\n        </form>\r\n    )\r\n}\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({tasks, hideDoneTasks, removeTask, toogleTaskDone}) => (\r\n\r\n    <ul className=\"tasks\">\r\n        {tasks.map(task => (\r\n        <li \r\n            key={task.id}\r\n            className={`tasks__item${\r\n                task.done && hideDoneTasks \r\n                ? \" tasks__item--hidden\" \r\n                : \"\"}`}>\r\n            \r\n            <button \r\n                onClick={() => toogleTaskDone(task.id)}\r\n                className=\"tasks__button tasks__button--done\">\r\n                <span className={`tasks__icon ${task.done ? \"fas fa-check\" : \"\"}`}></span>\r\n            </button>\r\n\r\n            <span className={`tasks__content ${task.done ? \"task-content--done\" : \"\"}`}>{task.content}</span>\r\n\r\n            <button \r\n                onClick={() => removeTask(task.id)}\r\n                className=\"tasks__button tasks__button--remove\"\r\n            >\r\n                <span className=\"tasks__icon fas fa-trash-alt\"></span>\r\n            </button>\r\n        </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nexport default Tasks;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({tasks, hideDoneTasks, toogleHideDoneTasks, markAllTaskDone}) => {\r\n    \r\n    if(!tasks.length) {\r\n        return null;\r\n    };\r\n\r\n    return (\r\n        <div className=\"buttons\">\r\n            <button \r\n                onClick={toogleHideDoneTasks}\r\n                className=\"button toggleHideTasks\">{hideDoneTasks ? \"Show completed\" : \"Hide completed\"}\r\n            </button>\r\n            \r\n            <button \r\n                onClick={markAllTaskDone}\r\n                className=\"button toggleDoneTasks\"\r\n                disabled={tasks.every(({ done }) => done)}\r\n                >Complete all\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n    \r\n\r\n\r\nexport default Buttons;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Section = ({title, sectionBody, extraHeaderContent}) => (\r\n    <section className=\"section\">\r\n        <div className=\"section__container\">\r\n            <h2 className=\"section__header\">{title}</h2>\r\n            {extraHeaderContent}\r\n        </div>\r\n        <div className=\"section__body\">\r\n            {sectionBody}\r\n        </div>\r\n    </section>\r\n);\r\n\r\n    \r\nexport default Section;\r\n\r\n","import React from \"react\";\r\n\r\nconst Header = ({title}) => (\r\n    <header>\r\n            <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Container = (props) => (\r\n\r\n    <main className=\"container\">\r\n\r\n        {props.children}\r\n        \r\n    </main>\r\n\r\n);\r\n\r\nexport default Container;","import React, {useState} from \"react\";\r\nimport Form from \"./Form\";\r\nimport Tasks from \"./Tasks\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"./Section\";\r\nimport Header from \"./Header\";\r\nimport Container from \"./Container\";\r\n\r\n\r\nfunction App() {\r\n  const [hideDoneTasks, setHideDoneTask] = useState(false);\r\n  const [tasks, setTasks] = useState([\r\n    { id: 1, content: \"Eat breakfast\", done: true },\r\n    { id: 2, content: \"Do exercises\", done: false },\r\n  \r\n  ]);\r\n\r\n  const toogleHideDoneTasks = () => { \r\n    setHideDoneTask(hideDoneTasks => !hideDoneTasks);\r\n  }\r\n\r\n  const markAllTaskDone = () => {\r\n    setTasks(tasks => tasks.map(task => ({\r\n      ...task,\r\n      done: true,\r\n    })))\r\n  }\r\n  \r\n  const removeTask = (id) => {\r\n    setTasks(tasks => tasks.filter(task => task.id !== id));\r\n  } \r\n\r\n  const toogleTaskDone = (id) => {\r\n    setTasks(tasks => tasks.map(task => {\r\n      if(task.id === id) {\r\n        return {...task, done: !task.done};\r\n      }\r\n\r\n      return task;\r\n    }));\r\n  } \r\n\r\n  const addNewTask = (newTaskContent) => {\r\n    \r\n    if (newTaskContent) {\r\n      setTasks( tasks => [\r\n        ...tasks, \r\n        {\r\n          content: newTaskContent,\r\n          done: false,\r\n          id: tasks.length === 0 ? 1 : tasks[tasks.length - 1].id + 1,\r\n        }\r\n      ]);\r\n    }\r\n    return null;\r\n\r\n  };\r\n\r\n\r\n  return (\r\n    <Container>\r\n        <Header title=\"To-do list\"/>\r\n        <Section \r\n          title=\"Add task\"\r\n          sectionBody={\r\n            <Form \r\n              buttonName=\"Add task\"\r\n              addNewTask={addNewTask}\r\n              />}\r\n        />\r\n        <Section \r\n          title=\"To-do list\" \r\n          extraHeaderContent={\r\n            <Buttons \r\n              tasks={tasks} \r\n              hideDoneTasks={hideDoneTasks} \r\n              toogleHideDoneTasks={toogleHideDoneTasks}\r\n              markAllTaskDone={markAllTaskDone}\r\n            />}\r\n\r\n          sectionBody={\r\n            <Tasks \r\n              tasks={tasks} \r\n              hideDoneTasks={hideDoneTasks}\r\n              removeTask={removeTask}\r\n              toogleTaskDone={toogleTaskDone}\r\n            />}\r\n        />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}